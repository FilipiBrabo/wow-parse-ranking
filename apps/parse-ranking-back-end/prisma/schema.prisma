// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Character {
  id             Int       @id @default(autoincrement())
  name           String    @unique
  wclId          Int?      @unique
  guild          Guild?    @relation(fields: [guildId], references: [id])
  guildId        Int?
  class          String
  serverRegion   String?
  serverSlug     String?
  lastRankUpdate DateTime?
  isActive       Boolean   @default(true)
  isBrazilian    Boolean   @default(true)
  rankings       Ranking[]
}

model Guild {
  id                  Int         @id @default(autoincrement())
  name                String      @unique
  wclId               Int         @unique
  serverRegion        String
  serverSlug          String
  isBrazilian         Boolean     @default(false)
  lastCharacterUpdate DateTime?
  character           Character[]
}

model Ranking {
  id          Int        @id @default(autoincrement())
  character   Character? @relation(fields: [characterId], references: [id])
  characterId Int?

  todayPercent Float
  lockedIn     Boolean
  spec         String
  reportCode   String
  duration     Int
  amount       Float

  encounter   Encounter @relation(fields: [encounterId], references: [id])
  encounterId Int

  @@unique([characterId, encounterId, spec])
}

model Encounter {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  wclId      Int       @unique
  size       Int
  difficulty Int
  isActive   Boolean
  Ranking    Ranking[]
  Raid       Raid      @relation(fields: [raidId], references: [id])
  raidId     Int
}

model Raid {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  Encounter Encounter[]
}
